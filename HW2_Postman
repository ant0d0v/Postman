HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

This is the first responce from server!ss

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
{
    "age": "",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 4000
    },
    "name": "Anton",
    "salary": 1000
}

3. Спарсить response body в json.
 var jsonData = pm.response.json();
4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Проверить, что name в ответе равно name s request ", function () {
     pm.expect(jsonData.name).to.eql("Anton");
});
5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Проверить, что age в ответе равно age s request ", function () {
     pm.expect(jsonData.age).to.eql('26');
});
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test(" Проверить, что salary в ответе равно salary s request ( ", function () {
     pm.expect(jsonData.salary).to.eql(1000);
});
7. Спарсить request.
  let req = request.data;
8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Проверить, что name в ответе равно name s request ", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});


9. Проверить, что age в ответе равно age s request (age забрать из request.)
   let req_age = req.age;
   pm.test("Проверить, что age в ответе равно age s request ", function () {
   pm.expect(jsonData.age).to.eql(req_age);
    });


10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test(" Проверить, что salary в ответе равно salary s request  ", function () {
     pm.expect(JSON.stringify(jsonData.salary)).to.eql(req_salary);
});

11. Вывести в консоль параметр family из response.

console.log("family---", jsonData.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)", function () {
     pm.expect(u_salary_1_5_year).to.eql(req_salary * 4 );
});



http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}

{
    "age": "26",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "pets": {
            "cat": {
                "age": 3,
                "name": "Sunny"
            },
            "dog": {
                "age": 4,
                "name": "Luky"
            }
        },
        "u_salary_1_5_year": 4000
    },
    "name": "Anton",
    "salary": 1000
}


3. Спарсить response body в json.
 
var jsonData = pm.response.json();
4. Спарсить request.
let req = pm.request.url.query.toObject();
5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Проверить, что name в ответе равно name s request ", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Проверить, что age в ответе равно age из request", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Проверить, что age в ответе равно age из request", function () {
    pm.expect(jsonData.salary).to.eql(req.salary);
});

8. Вывести в консоль параметр family из response.
console.log("salary family--", jsonData.family);
9. Проверить, что у параметра dog есть параметры name.
pm.test("Проверить, что у параметра dog есть параметры name.", function () {
 pm.expect(JSON.stringify(dog_name)).to.include("name");});

10. Проверить, что у параметра dog есть параметры age.
 pm.test("Проверить, что у параметра dog есть параметры age.", function () {
 pm.expect(JSON.stringify(dog_name)).to.include("age");});

11. Проверить, что параметр name имеет значение Luky.

let dog_name_luky = jsonData.family.pets.dog.name;

pm.test("Проверить, что параметр name имеет значение Luky", function () {
 pm.expect((dog_name_luky)).to.include("Luky");
 });

12. Проверить, что параметр age имеет значение 4.
 let dog_name_age = jsonData.family.pets.dog.age;
 
pm.test("Проверить, что параметр age имеет значение 4.", function () {
 pm.expect(JSON.stringify(dog_name_age)).to.include(4);
 });

http://162.55.220.72:5005/object_info_4

1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
 var jsonData = pm.response.json();
4. Спарсить request.
 let req = pm.request.url.query.toObject();
5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Проверить, что name в ответе равно name s request ", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)

pm.test("Проверить, что age в ответе равно age из request", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});


7. Вывести в консоль параметр salary из request.

console.log("salary req--", req.salary);

8. Вывести в консоль параметр salary из response.
console.log("salary response--", jsonData.salary);


9. Вывести в консоль 0-й элемент параметра salary из response.
console.log("salary req [0]",req.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log("salary response [1]",jsonData.salary[1])
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log("salary response [2]",jsonData.salary[2])
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)", function () {
    pm.expect(JSON.stringify(jsonData.salary[0])).to.eql(req.salary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Проверить, что 1-й элемент параметра salary равен salary*2 из request", function () {
    pm.expect(jsonData.salary[1]).to.eql(JSON.stringify(req_salary*2));
});
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Проверить, что 2-й элемент параметра salary равен salary*3 из request", function () {
    pm.expect(jsonData.salary[2]).to.eql(JSON.stringify(req_salary*3));
});

15. Создать в окружении переменную name
VERIABLE = name INITIAL VALUE = Anton
16. Создать в окружении переменную age
VERIABLE = age INITIAL VALUE = 26
17. Создать в окружении переменную salary
VERIABLE = salary INITIAL VALUE = 1000
18. Передать в окружение переменную name
{{name}}
19. Передать в окружение переменную age
{{age}}
20. Передать в окружение переменную salary
{{salary}}
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
var json_resp = pm.response.json();

console.log(json_resp)

var salary = json_resp.salary

console.log(salary)

for (var i = 0; i< salary.length; i++){
    console.log("Salary_" + i + ":" + salary[i])
}



http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
{{salary}}
2. Вставить параметр age из окружения в age
{{age}}
3. Вставить параметр name из окружения в name
{{name}}
4. Отправить запрос.
{
    "person": {
        "u_age": 26,
        "u_name": [
            "Anton",
            1000,
            26
        ],
        "u_salary_5_years": 4200.0
    },
    "qa_salary_after_1.5_year": 3300.0,
    "qa_salary_after_12_months": 2700.0,
    "qa_salary_after_3.5_years": 3800.0,
    "qa_salary_after_6_months": 2000,
    "start_qa_salary": 1000
}
5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

6. Спарсить response body в json.
var jsonData = pm.response.json();

7. Спарсить request.
let req = request.data;

8. Проверить, что json response имеет параметр start_qa_salary


9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Проверить, что json response имеет параметр qa_salary_after_6_months", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_1.5_year");
});
10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Проверить, что json response имеет параметр qa_salary_after_12_months", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_12_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Проверить, что json response имеет параметр qa_salary_after_1.5_year", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Проверить, что json response имеет параметр qa_salary_after_3.5_years", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_3.5_years");
});

13. Проверить, что json response имеет параметр person

pm.test("Проверить, что json response имеет параметр person", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Проверить, что параметр start_qa_salary равен salary из request", function () {

    pm.expect(jsonData.start_qa_salary).to.eql(parseInt(req.salary));
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Проверить, что параметр qa_salary_after_6_months равен salary*2 из request ", function () {

    pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(req.salary * 2));
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request ", function () {

    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseInt(req.salary * 2.7));
});


17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

let a = jsonData["qa_salary_after_1.5_year"];

pm.test(" Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request", function () {

    pm.expect(a).to.eql(parseInt(req.salary * 3.3));
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request", function () {

    pm.expect(b).to.eql(parseInt(req.salary * 3.8));
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Проверить, что в параметре person, 1-й элемент из u_name равен salary из request ", function () {

    pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(req.salary));
});
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Проверить, что что параметр u_age равен age из request ", function () {

    pm.expect(jsonData.person.u_age).to.eql(parseInt(req.age));
});


21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

pm.test("Проверить, что параметр u_salary_5_years равен salary*4.2 из request ", function () {

    pm.expect(jsonData.person.u_salary_5_years).to.eql(parseInt(req.salary * 4.2));
});
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
var json_resp = pm.response.json();

console.log("JSON = ", json_resp)

var person = json_resp.person
       console.log("Человек = ", person)
var a = person.length
for(i in person) {
console.log("Person = ", i + ":" + person[i]);
}

